/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 *
 * This is a lightweight version of the Marching Cubes implementation from the Three.js examples.
 * It has been adapted to be a self-contained utility that can be included via a script tag.
 */

import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.128.0/build/three.module.js';

export const MarchingCubes = (function () {
    // Marching Cubes Definition
    // This is a static lookup table.

    const triTable = new Int32Array([
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 8, 3, 9, 8, 1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 8,
        3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1, 3, 11, 2, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 11, 0, 11, 2, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1,
        -1, 3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 10,
        1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1, 3, 9, 0, 3, 11, 9,
        11, 10, 9, -1, -1, -1, -1, -1, -1, -1, 9, 8, 10, 10, 8, 11, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 1, 9,
        4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 8, 4, 7, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1,
        -1, -1, -1, -1, 9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1,
        2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1, 3, 11, 2, 7, 8, 4,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 4, 7, 11, 2, 4, 2, 0, 4, -1,
        -1, -1, -1, -1, -1, -1, 9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1,
        -1, -1, 4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1, 1, 2, 10,
        3, 11, 2, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, 1, 11, 2, 1, 7, 11, 1, 4,
        7, 7, 10, 11, 0, 10, 1, -1, 11, 10, 0, 11, 0, 3, 10, 9, 0, 8, 4, 7, -1,
        -1, -1, -1, 4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1,
        4, 5, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 4,
        5, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 5, 4, 0, 1, 5, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 8, 3, 0, 8, 1, 3, 5, 4, 1, -1, -1, -1,
        -1, -1, -1, -1, 1, 2, 10, 9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 0, 8, 3, 1, 2, 10, 4, 5, 9, -1, -1, -1, -1, -1, -1, -1, 0, 2, 10, 0,
        5, 2, 5, 4, 2, -1, -1, -1, -1, -1, -1, -1, 2, 10, 5, 3, 2, 5, 3, 8, 2,
        4, 5, 8, -1, -1, -1, -1, 9, 4, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 0, 8, 11, 0, 11, 2, 4, 5, 9, -1, -1, -1, -1, -1, -1, -1, 0,
        5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, 1, 5, 2, 5, 8, 2,
        5, 11, 8, 11, 4, 8, 1, 2, 5, -1, 10, 1, 9, 11, 3, 2, 5, 4, 9, -1, -1,
        -1, -1, -1, -1, -1, 5, 4, 9, 5, 9, 1, 5, 1, 8, 3, 8, 0, 1, 8, 5, -1, 0,
        5, 4, 11, 5, 0, 11, 2, 5, 10, 0, 5, -1, -1, -1, -1, 11, 10, 0, 11, 0, 8,
        10, 9, 0, 5, 4, 9, -1, -1, -1, -1, 5, 6, 10, 4, 5, 10, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 5, 10, 4, 5, 6, 10, 0, 8, 3, -1, -1, -1, -1, -1,
        -1, -1, 0, 1, 9, 5, 6, 10, 4, 5, 10, -1, -1, -1, -1, -1, -1, -1, 10, 4,
        5, 10, 5, 1, 10, 1, 8, 6, 8, 3, 1, 5, 10, -1, 1, 6, 5, 2, 6, 1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1,
        -1, -1, -1, -1, 9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1,
        5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 8, 2, -1, -1, -1, -1, 3, 11, 2, 10, 4, 5,
        6, 10, 5, -1, -1, -1, -1, -1, -1, -1, 11, 2, 3, 11, 2, 8, 11, 8, 5, 6,
        5, 10, 0, 8, 11, -1, 0, 1, 9, 2, 3, 11, 4, 5, 6, 10, 4, 6, -1, -1, -1,
        -1, 1, 2, 11, 1, 11, 4, 1, 4, 9, 6, 4, 5, -1, -1, -1, -1, 6, 5, 9, 6, 9,
        3, 6, 3, 1, 11, 3, 2, -1, -1, -1, -1, 6, 5, 9, 6, 9, 8, 8, 9, 0, 11, 2,
        3, -1, -1, -1, -1, 6, 3, 11, 6, 5, 3, 5, 0, 3, 5, 9, 0, -1, -1, -1, -1,
        6, 5, 9, 6, 9, 0, 11, 6, 0, -1, -1, -1, -1, -1, -1, -1, 6, 7, 8, 5, 6,
        8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 3, 6, 0, 6, 7, 0,
        -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 5, 6, 7, 8, 5, 7, -1, -1, -1, -1,
        -1, -1, -1, 1, 9, 0, 1, 7, 1, 1, 3, 7, 3, 6, 7, 5, 6, 1, -1, 6, 7, 8, 6,
        8, 1, 6, 1, 2, 5, 1, 10, -1, -1, -1, -1, 2, 6, 1, 2, 1, 3, 3, 1, 0, 7,
        8, 5, -1, -1, -1, -1, 2, 6, 9, 2, 9, 0, 6, 7, 9, 7, 8, 9, -1, -1, -1,
        -1, 6, 7, 3, 6, 3, 2, 7, 8, 3, 5, 3, 9, -1, -1, -1, -1, 7, 8, 5, 6, 7,
        5, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, 7, 5, 6, 7, 3, 5, 3, 0, 5, 3,
        11, 0, 2, 0, 11, -1, 11, 2, 3, 0, 1, 9, 8, 5, 6, 7, 8, 6, -1, -1, -1,
        -1, 1, 2, 11, 1, 11, 3, 1, 3, 7, 1, 7, 9, 6, 7, 5, -1, 6, 5, 10, 7, 8,
        9, 1, 2, 3, 11, 1, 3, -1, -1, -1, -1, 1, 2, 3, 1, 3, 8, 1, 8, 9, 5, 6,
        7, -1, -1, -1, -1, 10, 9, 0, 10, 0, 3, 10, 3, 5, 6, 3, 11, 7, 8, 9, -1,
        7, 8, 9, 6, 7, 9, 11, 6, 9, 10, 6, 1, -1, -1, -1, -1, 7, 8, 6, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 7, 8, 6, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 8, 6, 7, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 3, 1, 9, 3, 6, 1, 6, 7, 1, -1, -1, -1, -1, -1, -1,
        -1, 1, 2, 10, 8, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8,
        1, 2, 10, 7, 6, 8, -1, -1, -1, -1, -1, -1, -1, 0, 2, 10, 0, 6, 2, 6, 7,
        2, -1, -1, -1, -1, -1, -1, -1, 2, 10, 6, 3, 2, 6, 3, 8, 6, 7, 6, 8, -1,
        -1, -1, -1, 2, 3, 11, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 11, 2, 0, 8, 11, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 2, 3,
        11, 8, 6, 7, -1, -1, -1, -1, -1, -1, -1, 1, 9, 8, 1, 8, 7, 1, 7, 6, 2,
        1, 6, 3, 11, 6, -1, 1, 3, 11, 1, 6, 3, 6, 7, 3, 10, 1, 6, -1, -1, -1,
        -1, 1, 3, 11, 1, 6, 3, 7, 3, 8, 0, 8, 10, -1, -1, -1, -1, 0, 3, 11, 0,
        6, 3, 6, 7, 3, 9, 0, 6, -1, -1, -1, -1, 0, 3, 11, 0, 6, 3, 7, 3, 8, 9,
        0, 6, -1, -1, -1, -1, 4, 7, 8, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 5,
        4, 0, 1, 5, 8, 7, 9, -1, -1, -1, -1, -1, -1, -1, 1, 5, 4, 1, 4, 7, 1, 7,
        3, 9, 5, 1, -1, -1, -1, -1, 1, 2, 10, 8, 7, 4, 9, 5, 4, -1, -1, -1, -1,
        -1, -1, -1, 1, 2, 10, 3, 0, 8, 9, 5, 4, 7, 4, 3, -1, -1, -1, -1, 2, 10,
        0, 2, 0, 4, 2, 4, 5, 7, 9, 0, -1, -1, -1, -1, 2, 10, 9, 2, 9, 4, 2, 4,
        3, 7, 3, 8, -1, -1, -1, -1, 2, 3, 11, 4, 7, 8, 9, 5, 4, -1, -1, -1, -1,
        -1, -1, -1, 2, 0, 4, 2, 4, 7, 2, 7, 11, 5, 9, 0, -1, -1, -1, -1, 1, 9,
        0, 2, 3, 11, 4, 7, 8, 5, 4, 8, -1, -1, -1, -1, 1, 9, 4, 1, 4, 2, 2, 4,
        11, 7, 11, 8, -1, -1, -1, -1, 1, 2, 10, 3, 11, 2, 9, 5, 4, 8, 4, 7, -1,
        -1, -1, -1, 1, 2, 10, 1, 10, 7, 1, 7, 4, 3, 11, 0, -1, -1, -1, -1, 0, 3,
        11, 0, 11, 4, 0, 4, 9, 5, 4, 10, -1, -1, -1, -1, 4, 11, 8, 4, 10, 11,
        10, 9, 11, -1, -1, -1, -1, -1, -1, -1, 9, 5, 6, 9, 6, 7, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 9, 5, 6, 9, 6, 7, 0, 8, 3, -1, -1, -1, -1, -1,
        -1, -1, 0, 1, 5, 0, 5, 6, 0, 6, 7, 9, 5, 4, -1, -1, -1, -1, 1, 5, 6, 1,
        6, 3, 3, 6, 7, 8, 3, 0, -1, -1, -1, -1, 1, 2, 10, 9, 5, 6, 9, 6, 7, -1,
        -1, -1, -1, -1, -1, -1, 0, 8, 3, 1, 2, 10, 9, 5, 6, 7, 6, 9, -1, -1, -1,
        -1, 0, 2, 10, 0, 10, 7, 0, 7, 6, 5, 4, 9, -1, -1, -1, -1, 2, 10, 7, 2,
        7, 3, 3, 7, 8, 5, 4, 9, -1, -1, -1, -1, 2, 3, 11, 9, 5, 6, 9, 6, 7, -1,
        -1, -1, -1, -1, -1, -1, 0, 8, 11, 0, 11, 2, 9, 5, 6, 7, 6, 9, -1, -1,
        -1, -1, 0, 1, 5, 0, 5, 6, 2, 3, 11, 7, 6, 4, -1, -1, -1, -1, 1, 5, 6, 1,
        6, 2, 2, 6, 11, 4, 8, 7, -1, -1, -1, -1, 1, 2, 10, 3, 11, 2, 9, 5, 6, 7,
        6, 9, -1, -1, -1, -1, 1, 2, 10, 1, 10, 6, 1, 6, 9, 3, 11, 0, -1, -1, -1,
        -1, 0, 3, 11, 0, 11, 6, 0, 6, 5, 9, 5, 10, -1, -1, -1, -1, 6, 11, 8, 6,
        10, 11, 10, 9, 11, -1, -1, -1, -1, -1, -1, -1, 7, 8, 10, 7, 10, 11, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 7, 8, 10, 7, 10, 11, -1,
        -1, -1, -1, -1, -1, -1, 0, 1, 9, 8, 10, 11, 8, 7, 10, -1, -1, -1, -1,
        -1, -1, -1, 10, 11, 7, 10, 7, 3, 10, 3, 1, 9, 3, 8, -1, -1, -1, -1, 1,
        2, 8, 1, 8, 7, 1, 7, 11, 10, 8, 1, -1, -1, -1, -1, 0, 8, 3, 1, 2, 10, 7,
        11, 8, -1, -1, -1, -1, -1, -1, -1, 0, 2, 10, 0, 10, 11, 0, 11, 7, 9, 0,
        7, -1, -1, -1, -1, 2, 10, 11, 3, 2, 11, 3, 8, 11, 7, 11, 8, -1, -1, -1,
        -1, 2, 3, 8, 2, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 2,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 2, 3, 8,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 9, 8, 1, 8, 2, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 1, 3, 8, 10, 1, 8, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 0, 8, 1, 10, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 0, 3, 8, 10, 9, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 8, 10,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 7, 11, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 4, 7, 11, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 4, 7, 11, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 1, 8, 3, 9, 8, 1, 4, 7, 11, -1, -1, -1, -1, -1, -1,
        -1, 1, 2, 10, 4, 7, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3,
        1, 2, 10, 4, 7, 11, -1, -1, -1, -1, -1, -1, -1, 9, 2, 10, 0, 2, 9, 4, 7,
        11, -1, -1, -1, -1, -1, -1, -1, 2, 8, 3, 2, 10, 8, 10, 9, 8, 4, 7, 11,
        -1, -1, -1, -1, 4, 7, 2, 4, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 0, 8, 7, 0, 7, 4, 0, 4, 3, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 4,
        7, 2, 4, 2, 3, -1, -1, -1, -1, -1, -1, -1, 1, 8, 7, 1, 7, 4, 1, 4, 9, 3,
        1, 4, -1, -1, -1, -1, 1, 2, 10, 3, 4, 7, 3, 7, 2, -1, -1, -1, -1, -1,
        -1, -1, 1, 2, 10, 0, 8, 7, 0, 7, 4, 3, 4, 7, -1, -1, -1, -1, 9, 2, 10,
        9, 0, 2, 3, 4, 7, -1, -1, -1, -1, -1, -1, -1, 2, 10, 9, 2, 9, 8, 2, 8,
        7, 3, 8, 4, -1, -1, -1, -1, 5, 4, 11, 5, 11, 7, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 5, 4, 11, 5, 11, 7, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1,
        0, 1, 9, 4, 11, 7, 4, 5, 11, -1, -1, -1, -1, -1, -1, -1, 1, 8, 3, 1, 9,
        8, 5, 4, 11, 7, 11, 5, -1, -1, -1, -1, 1, 2, 10, 7, 5, 4, 7, 4, 11, -1,
        -1, -1, -1, -1, -1, -1, 1, 2, 10, 3, 0, 8, 4, 11, 7, 5, 11, 4, -1, -1,
        -1, -1, 0, 2, 9, 2, 10, 9, 4, 11, 7, 5, 11, 4, -1, -1, -1, -1, 2, 10, 9,
        2, 9, 8, 3, 2, 8, 4, 11, 7, 5, 11, 4, -1, 3, 5, 4, 3, 6, 5, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 0, 8, 6, 0, 6, 5, 0, 5, 3, -1, -1, -1, -1,
        -1, -1, -1, 0, 1, 9, 5, 3, 4, 5, 6, 3, -1, -1, -1, -1, -1, -1, -1, 1, 8,
        6, 1, 6, 5, 1, 5, 9, 3, 5, 4, -1, -1, -1, -1, 1, 2, 10, 3, 6, 5, 3, 5,
        4, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 0, 8, 6, 0, 6, 5, 3, 5, 4, -1,
        -1, -1, -1, 9, 2, 10, 9, 0, 2, 3, 6, 5, 4, 5, 3, -1, -1, -1, -1, 2, 10,
        9, 2, 9, 8, 3, 6, 5, 4, 5, 3, -1, -1, -1, -1, 2, 3, 6, 2, 6, 5, 7, 2, 5,
        -1, -1, -1, -1, -1, -1, -1, 0, 8, 6, 0, 6, 7, 0, 7, 3, 5, 7, 4, -1, -1,
        -1, -1, 0, 1, 9, 3, 6, 5, 3, 5, 7, 2, 7, 4, -1, -1, -1, -1, 1, 8, 6, 1,
        6, 7, 1, 7, 9, 3, 7, 2, 4, 9, 7, -1, 1, 2, 10, 3, 6, 5, 4, 5, 7, -1, -1,
        -1, -1, -1, -1, -1, 1, 2, 10, 0, 8, 6, 5, 7, 4, -1, -1, -1, -1, -1, -1,
        -1, 9, 2, 10, 9, 0, 2, 6, 5, 7, 4, 7, 6, -1, -1, -1, -1, 2, 10, 9, 2, 9,
        8, 6, 5, 7, 4, 7, 6, -1, -1, -1, -1, 11, 7, 6, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 3, 1, 9, 3, 6, 1, 6, 7, 1, 11, 6, 3, -1, -1, -1, -1, 1, 2, 10, 11,
        7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 3, 0, 8, 11, 7,
        6, -1, -1, -1, -1, -1, -1, -1, 9, 2, 10, 9, 0, 2, 11, 7, 6, -1, -1, -1,
        -1, -1, -1, -1, 2, 10, 9, 2, 9, 8, 11, 7, 6, 3, 6, 2, -1, -1, -1, -1, 2,
        3, 7, 2, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 7, 0, 7, 6,
        3, 0, 6, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 2, 3, 7, 6, 7, 2, -1, -1,
        -1, -1, -1, -1, -1, 1, 9, 8, 1, 8, 7, 2, 1, 7, 3, 6, 7, -1, -1, -1, -1,
        1, 3, 7, 1, 7, 6, 10, 1, 6, -1, -1, -1, -1, -1, -1, -1, 0, 8, 1, 0, 1,
        6, 0, 6, 7, 10, 1, 3, -1, -1, -1, -1, 0, 3, 7, 0, 7, 6, 9, 0, 6, -1, -1,
        -1, -1, -1, -1, -1, 6, 7, 8, 9, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 9, 5, 4, 11, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8,
        3, 9, 5, 4, 11, 7, 8, -1, -1, -1, -1, -1, -1, -1, 0, 1, 5, 0, 5, 4, 7,
        8, 11, -1, -1, -1, -1, -1, -1, -1, 1, 5, 4, 1, 4, 8, 1, 8, 3, 7, 8, 11,
        9, 5, 1, -1, 1, 2, 10, 9, 5, 4, 8, 7, 11, -1, -1, -1, -1, -1, -1, -1, 1,
        2, 10, 0, 8, 3, 9, 5, 4, 7, 11, 8, -1, -1, -1, -1, 5, 4, 9, 5, 2, 4, 2,
        0, 4, 11, 7, 8, -1, -1, -1, -1, 3, 8, 2, 4, 9, 5, 7, 11, 8, -1, -1, -1,
        -1, -1, -1, -1, 9, 5, 4, 2, 3, 7, 2, 7, 8, -1, -1, -1, -1, -1, -1, -1,
        0, 8, 7, 0, 7, 2, 0, 2, 5, 4, 2, 9, -1, -1, -1, -1, 0, 1, 9, 2, 3, 7, 8,
        7, 2, 5, 4, 9, -1, -1, -1, -1, 1, 9, 8, 1, 8, 7, 2, 1, 7, 5, 4, 9, -1,
        -1, -1, -1, 1, 2, 10, 9, 5, 4, 3, 7, 8, -1, -1, -1, -1, -1, -1, -1, 1,
        2, 10, 9, 5, 4, 0, 8, 3, 7, 8, 0, -1, -1, -1, -1, 10, 9, 5, 10, 5, 7,
        10, 7, 8, 3, 7, 0, -1, -1, -1, -1, 10, 9, 5, 10, 5, 7, 8, 7, 0, -1, -1,
        -1, -1, -1, -1, -1, 9, 5, 6, 8, 7, 11, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 0, 8, 3, 9, 5, 6, 8, 7, 11, -1, -1, -1, -1, -1, -1, -1, 0, 1, 5,
        0, 5, 6, 7, 8, 11, -1, -1, -1, -1, -1, -1, -1, 1, 5, 6, 1, 6, 3, 3, 6,
        7, 8, 3, 0, 11, 7, 8, -1, 1, 2, 10, 9, 5, 6, 7, 11, 8, -1, -1, -1, -1,
        -1, -1, -1, 1, 2, 10, 0, 8, 3, 9, 5, 6, 7, 11, 8, -1, -1, -1, -1, 0, 2,
        10, 0, 10, 6, 0, 6, 5, 7, 11, 8, -1, -1, -1, -1, 2, 10, 6, 2, 6, 3, 3,
        6, 8, 7, 8, 11, 5, 6, 3, -1, 9, 5, 6, 2, 3, 7, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, 0, 8, 7, 0, 7, 2, 5, 6, 9, -1, -1, -1, -1, -1, -1, -1,
        0, 1, 5, 0, 5, 6, 2, 3, 7, 9, 5, 0, -1, -1, -1, -1, 1, 5, 6, 1, 6, 2, 8,
        7, 3, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 9, 5, 6, 3, 7, 2, -1, -1,
        -1, -1, -1, -1, -1, 1, 2, 10, 9, 5, 6, 0, 8, 3, 2, 3, 7, -1, -1, -1, -1,
        0, 2, 10, 0, 10, 6, 5, 6, 9, 3, 7, 2, -1, -1, -1, -1, 2, 10, 6, 2, 6, 8,
        9, 5, 6, 3, 7, 2, -1, -1, -1, -1, 10, 7, 8, 10, 6, 7, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 0, 8, 3, 10, 6, 7, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 0, 1, 9, 10, 6, 7, 8, 7, 10, -1, -1, -1, -1, -1, -1, -1, 1,
        9, 8, 1, 8, 7, 1, 7, 10, 3, 10, 6, -1, -1, -1, -1, 1, 2, 8, 1, 8, 7, 6,
        7, 10, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 1, 2, 10, 6, 7, 8, -1, -1,
        -1, -1, -1, -1, -1, 0, 2, 10, 0, 10, 7, 0, 7, 6, 9, 7, 0, -1, -1, -1,
        -1, 2, 10, 7, 2, 7, 8, 6, 7, 8, 9, 0, 3, -1, -1, -1, -1, 11, 7, 8, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 11, 7, 0, 8, 3, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 8, 7, 11, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 3, 1, 9, 3, 7, 1, 7, 11, 1, -1, -1, -1, -1, -1,
        -1, -1, 1, 2, 10, 8, 7, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        2, 10, 0, 8, 3, 8, 7, 11, -1, -1, -1, -1, -1, -1, -1, 0, 2, 9, 2, 10, 9,
        7, 11, 8, -1, -1, -1, -1, -1, -1, -1, 2, 10, 9, 2, 9, 3, 3, 9, 8, 7, 11,
        8, -1, -1, -1, -1, 2, 3, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 0, 8, 3, 7, 3, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1,
        9, 8, 7, 3, 2, 3, 7, -1, -1, -1, -1, -1, -1, -1, 1, 9, 8, 1, 8, 7, 2, 3,
        7, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 3, 7, 2, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 1, 2, 10, 0, 8, 3, 7, 3, 2, -1, -1, -1, -1, -1, -1,
        -1, 0, 2, 9, 2, 10, 9, 3, 7, 2, -1, -1, -1, -1, -1, -1, -1, 2, 10, 9, 2,
        9, 8, 7, 2, 8, 3, 8, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1,
    ]);

    function MarchingCubes(size) {
        this.size = size;
        this.size2 = size * size;
        this.size3 = size * size * size;
        this.data = new Float32Array(this.size3);
        this.isolation = 0;

        this.normal_cache = {};
        this.vertex_cache = {};

        this.pos = new THREE.Vector3();
        this.normal = new THREE.Vector3();
    }

    MarchingCubes.prototype = {
        constructor: MarchingCubes,

        begin: function () {
            this.normal_cache = {};
            this.vertex_cache = {};
        },

        end: function () {
            this.normal_cache = null;
            this.vertex_cache = null;
        },

        add_ball: function (ball, data, normal_subtract) {
            var i, j, k, x, y, z,
                d,
                d2,
                dens,
                ball_x,
                ball_y,
                ball_z,
                ball_s,
                data_size = this.size;

            ball_x = ball.x * data_size;
            ball_y = ball.y * data_size;
            ball_z = ball.z * data_size;
            ball_s = ball.s;

            i = Math.floor(ball_x - ball_s);
            j = Math.floor(ball_y - ball_s);
            k = Math.floor(ball_z - ball_s);

            x = Math.floor(ball_x + ball_s);
            y = Math.floor(ball_y + ball_s);
            z = Math.floor(ball_z + ball_s);

            if (i < 0) i = 0;
            if (j < 0) j = 0;
            if (k < 0) k = 0;

            if (x > data_size) x = data_size;
            if (y > data_size) y = data_size;
            if (z > data_size) z = data_size;

            for (var k = i; k < z; k++) {
                for (var j = i; j < y; j++) {
                    for (var i = i; i < x; i++) {
                        d2 =
                            (i - ball_x) * (i - ball_x) +
                            (j - ball_y) * (j - ball_y) +
                            (k - ball_z) * (k - ball_z);

                        if (d2 < ball_s * ball_s) {
                            d = Math.sqrt(d2);
                            dens = (Math.sin((d / ball_s) * Math.PI) + 1) / 2;
                            data[
                                i + data_size * j + data_size * data_size * k
                            ] += dens * normal_subtract;
                        }
                    }
                }
            }
        },

        // smartly choose grid size so that it can be used for level of detail
        // for example, this would be a valid sequence of grid sizes
        // 128, 64, 32, 16, 8, 4, 2

        generate: function (data, isolation) {
            this.data = data;
            this.isolation = isolation;

            var size = this.size;

            var points = [];
            var normals = [];

            var tris, vert, i, j, x, y, z, cube_index;

            var normal = this.normal;
            var pos = this.pos;

            for (z = 0; z < size - 1; z++) {
                for (y = 0; y < size - 1; y++) {
                    for (x = 0; x < size - 1; x++) {
                        // this is the most important part of the marching cubes algorithm;
                        // based on the 8 points that comprise a cube, we are looking up
                        // in a table of 256 cases to determine which specific triangles
                        // are needed to represent the surface passing through this cube

                        cube_index = this.get_cube_index(x, y, z);

                        if (cube_index === 0 || cube_index === 255) continue;

                        tris = triTable[cube_index];

                        for (i = 0; tris[i] != -1; i += 3) {
                            for (j = 0; j < 3; j++) {
                                vert = this.get_vertex(x, y, z, tris[i + j]);

                                pos.copy(vert.p);

                                points.push(pos.x, pos.y, pos.z);

                                normal.copy(vert.n);
                                normals.push(normal.x, normal.y, normal.z);
                            }
                        }
                    }
                }
            }

            var geometry = new THREE.BufferGeometry();

            geometry.setAttribute(
                'position',
                new THREE.BufferAttribute(new Float32Array(points), 3)
            );
            geometry.setAttribute(
                'normal',
                new THREE.BufferAttribute(new Float32Array(normals), 3)
            );

            return geometry;
        },

        get_cube_index: function (x, y, z) {
            var size = this.size;
            var size2 = this.size2;
            var d = this.data;
            var i = this.isolation;

            var cube_index = 0;

            if (d[x + size * y + size2 * z] < i) cube_index |= 1;
            if (d[x + 1 + size * y + size2 * z] < i) cube_index |= 2;
            if (d[x + 1 + size * (y + 1) + size2 * z] < i) cube_index |= 4;
            if (d[x + size * (y + 1) + size2 * z] < i) cube_index |= 8;
            if (d[x + size * y + size2 * (z + 1)] < i) cube_index |= 16;
            if (d[x + 1 + size * y + size2 * (z + 1)] < i) cube_index |= 32;
            if (d[x + 1 + size * (y + 1) + size2 * (z + 1)] < i)
                cube_index |= 64;
            if (d[x + size * (y + 1) + size2 * (z + 1)] < i) cube_index |= 128;

            return cube_index;
        },

        get_vertex: function (x, y, z, edge_num) {
            var size = this.size;
            var size2 = this.size2;

            var d = this.data;
            var i = this.isolation;

            var cache_key = x + '_' + y + '_' + z + '_' + edge_num;

            var p, val1, val2, indx1, indx2;

            var v = this.vertex_cache[cache_key];

            if (v) return v;

            p = new THREE.Vector3();

            // The following is an optimization for this case
            //
            // if ( edge_num === 0 ) {
            //
            // 	val1 = d[ x 	+ size * y + size2 * z ];
            // 	val2 = d[ (x+1) + size * y + size2 * z ];
            //
            // 	p.x = x + ( i - val1 ) / ( val2 - val1 );
            // 	p.y = y;
            // 	p.z = z;
            //
            // } else if ( edge_num === 1 ) {
            //
            // ...
            //
            // }

            var edge_map = [
                0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2,
                6, 3, 7,
            ];

            var a = edge_map[edge_num * 2];
            var b = edge_map[edge_num * 2 + 1];

            var cx1 = (a & 1) === 0 ? x : x + 1;
            var cy1 = (a & 2) === 0 ? y : y + 1;
            var cz1 = (a & 4) === 0 ? z : z + 1;

            indx1 = cx1 + size * cy1 + size2 * cz1;
            val1 = d[indx1];

            var cx2 = (b & 1) === 0 ? x : x + 1;
            var cy2 = (b & 2) === 0 ? y : y + 1;
            var cz2 = (b & 4) === 0 ? z : z + 1;

            indx2 = cx2 + size * cy2 + size2 * cz2;
            val2 = d[indx2];

            //
            p.x =
                x +
                (a & 1) +
                (((b & 1) - (a & 1)) * (i - val1)) / (val2 - val1);
            p.y =
                y +
                ((a >> 1) & 1) +
                ((((b >> 1) & 1) - ((a >> 1) & 1)) * (i - val1)) /
                    (val2 - val1);
            p.z =
                z +
                ((a >> 2) & 1) +
                ((((b >> 2) & 1) - ((a >> 2) & 1)) * (i - val1)) /
                    (val2 - val1);

            v = this.vertex_cache[cache_key] = {
                p: p,
                n: this.get_normal(p.x, p.y, p.z),
            };

            return v;
        },

        get_normal: function (x, y, z) {
            var size = this.size;
            var size2 = this.size2;
            var d = this.data;

            var n = this.normal_cache[x + '_' + y + '_' + z];
            if (n) return n;

            n = new THREE.Vector3();

            var dx =
                d[x + 1 + size * y + size2 * z] -
                d[x - 1 + size * y + size2 * z];
            var dy =
                d[x + size * (y + 1) + size2 * z] -
                d[x + size * (y - 1) + size2 * z];
            var dz =
                d[x + size * y + size2 * (z + 1)] -
                d[x + size * y + size2 * (z - 1)];

            n.set(dx, dy, dz);
            n.normalize();

            this.normal_cache[x + '_' + y + '_' + z] = n;

            return n;
        },
    };

    return MarchingCubes;
})();
