const ChronicleRules = {
    'crisis_averted': {
        title: 'Crisis Averted in {regionName}',
        description: 'A {domain} threat that emerged in {regionName} has been successfully neutralized by {factionName}.',
        trigger: 'THREAT_MITIGATED', // This rule is checked when a threat is mitigated
        condition: (triggeringEvent, eventLog) => {
            // We need to find the corresponding threat generation event
            const threatId = triggeringEvent.data.threatId;
            const generationEvent = eventLog.find(e => e.eventType === 'THREAT_GENERATED' && e.data.threatId === threatId);
            return generationEvent !== undefined;
        },
        getTemplateData: (triggeringEvent, eventLog, worldState) => {
            const threat = triggeringEvent.data.threat;
            const region = worldState.getRegionForThreat(threat);
            const faction = worldState.factions.find(f => f.id === triggeringEvent.data.factionId);
            return {
                regionName: region ? region.name : 'an unknown region',
                domain: threat.domain,
                factionName: faction ? faction.name : 'an unknown entity'
            };
        }
    },
    'technocrat_plot': {
        title: 'Technocrat Plot Uncovered in {regionName}',
        description: 'A {domain} threat secretly deployed by the Evil Technocrats in {regionName} has been exposed and neutralized.',
        trigger: 'THREAT_MITIGATED',
        condition: (triggeringEvent, eventLog) => {
            const threatId = triggeringEvent.data.threatId;
            const generationEvent = eventLog.find(e => e.eventType === 'THREAT_GENERATED' && e.data.threatId === threatId);
            // Check if the threat was generated by the AI and mitigated by the Player
            return generationEvent && generationEvent.data.isFromAI && triggeringEvent.data.factionId === 'mitigators';
        },
        getTemplateData: (triggeringEvent, eventLog, worldState) => {
            const threat = triggeringEvent.data.threat;
            const region = worldState.getRegionForThreat(threat);
            return {
                regionName: region ? region.name : 'an unknown region',
                domain: threat.domain,
            };
        }
    },
    'fallout_warning': {
        title: 'Nuclear Fallout Detected',
        description: 'A WMD detonation in {regionName} has resulted in significant radioactive fallout, creating a new radiological threat.',
        trigger: 'WMD_DETONATION', // This is triggered by the custom event we added in the DomainLogic
        condition: (triggeringEvent, eventLog) => {
            // The event itself is the condition
            return triggeringEvent.data.yield > 20; // Only for large detonations
        },
        getTemplateData: (triggeringEvent, eventLog, worldState) => {
            return {
                regionName: triggeringEvent.data.region
            };
        }
    }
};
